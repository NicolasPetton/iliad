@node Elements
@chapter Elements

@cindex element
@cindex building HTML
@cindex HTML

@menu
* Composing the element tree::
* Elements and buildables::
* Actions::
* DOM events::
@end menu

Elements are low-level stateless objects composed in a tree to build valid (X)HTML. For each element class there is a corresponding HTML tag.
This means you will never have to worry about writing valid HTML yourself, but instead use the element API to build HTML in Smalltalk.

@sp 1
@code{#contents} methods of widgets (@pxref{Widgets}) or @dfn{controller methods} of applications (@pxref{Applications}) are called by Iliad to build HTML using elements.


@node Composing the element tree
@section Composing the element tree

@unnumberedsubsec Adding elements

@cindex ILHTMLBuilderELement

@code{ILHTMLBuilderELement} is the root class of the HTML element hierarchy. It has convenience methods for adding other HTML elements, and manipulate HTML attributes. These convenience methods follow HTML tag and attribute names. You can browse them in the @code{adding-convenience} protocol. All HTML elements inherit these methods.

@sp 1
The API provides the @code{#add:} method for adding a child to an element. Convenience methods use this method to compose the tree of elements.

@example
p [
    <category: 'adding-convenience'>
    ^self add: ILParagraphElement new
]
@end example


@unnumberedsubsec The HTML API

Each element in the tree represents a given HTML tag. Each attribute of an element has a corresponding HTML tag attribute. We compose HTML by combining the two kind of methods. 
As methods are named depending on the HTML tag they represent, building HTML with Iliad looks very similar to actual HTML code.

The following example

@example
e p: 'Hello world'.
e br.
e a
    href: 'http://www.iliadproject.org';
    text: 'Iliad website'.
@end example

Will produce the HTML:

@example
<p>Hello world</p>
<br/>
<a href='http://www.iliadproject.org'>Iliad website</a>
@end example

Most of the time you won't have to learn the HTML API if you already know the HTML tag names or attributes you want to write. If you can't find the name of a convenience method, you can browse the @code{ILHTMLBuilderELement} class and its subclasses in @code{Iliad-Core-HTMLElements}.


@node Elements and buildables
@section Elements and buildables

@cindex buildable
@cindex build

Buildable objects are high-level stateful graphical objects. They use elements to build themselves as HTML. They must implement the @code{#buildOn:} method, taking an element as parameter, which acts as a container for the contents of the buildable object.

A buildable object can be built on an element by sending the @code{ILElement>>build:} message to the element, using the buildable object as argument.

Default buildable objects in Iliad include @dfn{Block closures} and @dfn{Widgets}.

@example 
div build: [:e | e text: 'hello world'].
div build: myWidget.
@end example

@sp 1
Buildables should never be built using their @code{#contents} method or the @code{ILElement>>add:} method. Therefore, the following example is not valid.

@example 
e add: myWidget contents. "Not valid"
e build: myWidget. "Valid"
@end example

Block closures can be used to make building methods simpler by nesting elements.

@example
| div a |
div := e div.
a := div a.
a href: 'http://www.iliadproject.org'.
a img 
    src: 'iliad.png'; 
    alt: 'Iliad logo'.
div h1: 'Iliad rocks!'
@end example

Can be written:

@example
e div build: [:div |
    div a build: [:a |
        a href: 'http://www.iliadproject.org'.
        a img
            src: 'iliad.png';
            alt: 'Iliad logo'].
    div h1: 'Iliad rocks!']
@end example

And will build the following HTML code:

@example
<div>
    <a href='http://www.iliadproject.org'>
        <img src='iliad.png' alt='Iliad logo'/>
    </a>
    <h1>Iliad rocks!</h1>
</div>
@end example

@node Actions
@section Actions

@cindex action

Buildables can do more than just build HTML. They can behave, change their state and react to user interactions through executing server-side Smalltalk code defined in actions.

Instead of passing the burden of handling URLs, requests and parameters on to the developer, Iliad uses action objects to trigger Smalltalk code when the user interacts with the page, clicks on a link or submits a form.
An @dfn{action} is an Iliad object with a Smalltalk block associated to an id, but we will oftenly refer to the block of an action as the action itself.

@unnumberedsubsec Actions in anchors

The @code{ILAnchorElement} class provides the @code{#action:} method to associate an action block to the anchor.

@example 
e a
    text: 'Click!';
    action: [Transcript show: 'Anchor clicked.']
@end example

Because @code{#action:} will use the @code{href} attribute with a generated URL, anchors can't have both an associated action and an href.

@example
e a
    text: 'Click!';
    action: [Transcript show: 'Anchor clicked.'; cr];
    href: 'http://www/smalltalk.org' "This will override the href set by #action:"
@end example

If you do send both @code{action:} and @code{href:} messages to an anchor element, the final message decides on the outcome.

Note that a @code{href} will cause the browser to navigate to the specified URL, while the anchor will cause the server to execute Smalltalk code, which in turn @emph{might} result in a (partial or full) reload of the page's contents. Play a bit with the "mulit counter example" (@code{Iliad-More-Examples}) of the ILCounterApplication, which can be found in the demo site.

@example
contents [
    ^[:e |
        e h1: self count printString.
        e a
            action: [self increase];
            text: '++'.
        e space.
        e a
            action: [self decrease];
            text: '--']
]
@end example


@unnumberedsubsec Actions in forms

Form elements can and usually do have actions, which are evaluated when the form is submitted.
We can modify the @code{#contents} method of the counter example to use a form and buttons instead of anchors.

@example
contents [
    ^[:e |
        e h1: self count printString.
        e form build: [:form |
            form button
                text: '++';
                action: [self increase].
            form button
                text: '--';
                action: [self decrease]]]
]
@end example

Form elements like input, select  or textarea, which allow the user to enter or select a value, take a one argument action block. The argument is the value defined by the user.

@example
e form build: [:form |
    form input action: [:val | self doSomethingWith: val].
    form button text: 'Ok']
@end example

@node DOM events
@section DOM events

Iliad provides a simple API to associate JavaScript code to DOM events (click, focus, etc.) in the @code{accessing attributes-events} method protocol. The basic method is @code{#onEvent:add:} which takes two strings as arguments, the first one for the name of the event, the other for the associated JavaScript code. Many shortcut methods exist for specific events, like @code{#onClick:} or @code{#onFocus:}. 

@example
e p 
    text: 'Click';
    onClick: 'alert("clicked!");'.
@end example

@sp 1
If an element cannot be associated with a DOM event, an @code{ILAttributeNotUnderstood} error will be raised.

@unnumberedsubsec Evaluating actions on DOM Events

While the methods in the previous section are useful for executing client-side Javascript code, you again make use of actions to execute server-side Smalltalk code, when a DOM event occurs.
The names of these action methods are the shortcuts of the previous section with the suffix @code{Do:} attached to their names taking a block as argument.

@example
e p
    text: 'An action block is evaluated on a click event';
    onClickDo: [Transcript show: 'Clicked!'; cr]
@end example
