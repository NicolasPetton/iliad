@node Short tutorial
@chapter Short tutorial

@cindex buildable
@cindex widget
@cindex application

In this short tutorial we will build a simple counter as our first Iliad widget and embed it into a simple application.

Widgets (@pxref{Widgets}) are high-level reusable, stateful, graphical objects. We will create the class and a method to build HTML, then add some behavior to increase and decrease the counter.

@unnumberedsec Our first widget
Widgets are subclasses of ILWidget. Our widget will have a @code{count} @dfn{instance variable}, initialized to zero.

@example
Iliad.ILWidget subclass: CounterWidget [
    | count |

    initialize [
        super initialize.
        count := 0
    ]
]
@end example

To build HTML Iliad calls the @code{#contents} method of a widget. This method answers a buildable object: almost always a @dfn{block closure} or another widget.

@example
contents [
    ^[:e | e h1: count printString]
]
@end example

@unnumberedsec Action methods

Now we can add action methods (@pxref{Actions}) to increase and decrease the counter.

@example
increase [
    count := count + 1
]
@end example

@example
decrease [
    count := count - 1
]
@end example

To allow the user to increase or decrease the counter, we add anchors sending these messages to the @code{contents} method.

@example
contents [
    ^[:e |
        e h1: self count printString.
        e a 
            action: [self increase];
            text: '++'.
        e a
            action: [self decrease];
            text: '--']
]
@end example

If you try the code at this point, you will notice that the displayed counter value does not change, although the count instance variable is being updated. The missing link here is that you have to tell Iliad that changing the value of the @code{count} variable requires a client side update of the widget, too. Iliad will take care of this, but you have to decide and tell Iliad which widget(s) need rebuilding. You do this by sending the message @code{markDirty} to the widget(s) in question.

@example 
increase [
    count := count + 1.
    self markDirty
]
@end example

@example
decrease [
    count := count - 1.
    self markDirty
]
@end example

@unnumberedsec Using the counter widget in an application

To see our widget in action, we embed it into an application. Applications (@pxref{Applications}) are similar to widgets except that they dispatch requests in @dfn{controller methods}, similar to the @code{#contents} method of widgets. The default controller method is @code{#index}.

@example
Iliad.ILApplication subclass: CounterApplication [
    | counterWidget |
    
    CounterApplication class >> path [
        ^'counter'
    ]

    counterWidget [
        ^counterWidget ifNil: [counterWidget := CounterWidget new]
    ]

    index [
        <category: 'controllers'>
        ^self counterWidget
    ]
]
@end example

The class side @code{#path} method answers the base path of our application. All requests using this path will be handled by the application.
As seen above, widgets are usually initialized lazily. While you have to provide the implementation for every widget you @emph{might} use, not every widget @emph{will} be used. By using this pattern, only those widgets are built that are actually used.
