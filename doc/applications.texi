@node Applications
@chapter Applications

@cindex application
@cindex ILApplication

@menu
* The base path::
* Controller methods::
* Filtering controllers::
* Custom request dispatching::
* Updating the page::
@end menu

An application is the root of a buildable object tree composing the user interface. Applications are used to dispatch requests to other buildables, typically widgets (@pxref{Widgets}), and hold their state. Unlike widgets they don't have one building method but several @dfn{controller methods} used to dispatch requests to the right buildable object.

Application instances are handled by the framework. Iliad stores one instance of an application class per session, which will persist through requests.

@node The base path
@section The base path

@cindex path
@cindex base path

Each application class should have an unique @dfn{base path}, a string corresponding to the path of the application. The base path is answered by class method @code{path}.

@example
Iliad.ILApplication subclass: MyApplication [
    MyApplication class >> path [
        "Answer the base path of the application"
        ^'my_application'
    ]
]
@end example

During a request processing, Iliad will determine to which application the request will be dispatched depending on its base path. If Iliad is running on port 8888, instances of MyApplication will be reached at:

@example
http://localhost:8888/my_application
@end example

By default, @code{ILApplication}'s path is the empty string. This means the class method @code{path} must be overriden, else the application will not be reachable.

@sp 1
The base path of an application is interpreted as an absolute path, even if the leading @code{'/'} is omitted. Different Application classes can share the leading path fragments, as long as the complete path is unique for each application: @code{'/foo/bar'} and @code{'/foo/baz'} can be used for two distinct applications being served on the same port.

@node Controller methods
@section Controller methods

@cindex controller method

Controller methods are building methods used to answer requests. The application will dispatch the request to the method named after the first fragment of the URL following the application's @code{path}. The default controller method is called @code{#index}. Concrete applications should always override this method to answer a buildable object.

For example, an application with base path @code{'foo'} will try to dispatch a request url @code{'/foo/bar'} to its controller method @code{#bar}. If there is no method matching this rule, @code{#index} will be called instead.

By default, controller methods must be in the @code{'controllers'} method protocol to be allowed to be called as controller methods (@pxref{Filtering controllers}).

@unnumberedsubsec A 'hello world' application

At this point we can write a 'hello world' application, with a base path and an @code{#index} controller.

@example
Iliad.ILApplication subclass: HelloWorldApplication [
    
    HelloWorldApplication class >> path [
        <category: 'accessing'>
        ^'hello_world'
    ]

    index [
        <category: 'controllers'>
        ^[:e | e h1: 'hello world']
    ]
]
@end example

After starting Iliad on port 8888, the application can be browsed at @uref{http://localhost:8888/hello_world, http://localhost:8888/hello_world}. As expected, the application will dispatch both @code{/hello_world}, @code{/hello_world/} and @code{/hello_world/index} to the @code{#index} controller.

@unnumberedsubsec A multi-counter application

Let's improve the counter application written in the tutorial (@pxref{Short tutorial}) and make it a multi-counter application with several independent counters on the same page. 
As a rule of thumb, the application only references widgets, which in turn reference the "real" data.

@example
Iliad.ILApplication subclass: CounterApplication [
    | counters |

    CounterApplication class >> path [
        <category: 'accessing'>
        ^'counter'
    ]

    initialize [
        <category: ’initialization’>
        super initialize.
        counters := Array
            with: CounterWidget new
            with: CounterWidget new
            with: CounterWidget new
    ]

    index [
        <category: ’controllers’>
        ^[:e |
            counters do: [:each | e build: each]]
    ]
]
@end example

To persist through requests, widget state must be stored in a long-lived object. This duty typically falls to the application instance, as it is @emph{the} object that is long-lived enough for a session and, at the same time, small enough to be specific to only the current session.
Since our counter widgets are intended to be local to the user session, we use an instance variable to reference them.
"Global" counters, which would be shared between sessions, would be referenced via a class instance variable of the application.


@node Filtering controllers
@section Filtering controllers

@cindex selector filter
@cindex selectorFilter:

The use of a method of an application as a controller method is restricted by the @dfn{selector filter}.
The default selector filter allows exactly the methods in the @code{'controllers'} protocol, but every application class can implement its own selector filter.
You can override the class side @code{#defaultSelectoreFilter} method, or you can plug in a new selector filter with the class side @code{#selectorFilter:} method, which requires a selector filter block taking a single argument and answering a boolean.
Each time an application tries to dispatch a request to a potential controller method, the selector filter block is evaluated against its selector to determine if the corresponding method is allowed to be used as controller.

@sp 1
In the following example, the only selector allowed is @code{#index}, all other methods will be forbidden.

@example
MyApplication selectorFilter: [:selector | selector == #index]
@end example

@node Custom request dispatching
@section Custom request dispatching

@cindex dispatchOverride

If you need a special dispatcher for your application, implement the hook method @code{#dispatchOverride} in your @code{ILApplication}. 

The behavior of @code{#dispatchOverride} is very simple. Before going the default dispatch route, @code{#dispatchOverride} is called. If the answer is anything but @code{nil}, the application will consider the request as handled and will not dispatch it to a controller method.
Subclasses of @code{ILApplication} should call @code{super dispatchOverride} at some point to see if the request has already been handled.

@sp 1
@xref{Using a custom session class}, for a simple usage example of this method.

@node Updating the page
@section Updating the page

@cindex updatePage:

During the generation of a page for request processing, the application can update any part of it using the @code{#updatePage:} method. This method will be called for each new request excepting AJAX ones.
In this method we can for example change the title of the page by updating its @code{<head>} section.

@code{#updatePage:} should not be used to update contents of widgets included in the @code{<body>} section, as these widgets may not have been built, when Iliad calls @code{#updatePage:}.

The argument sent to @code{#updatePage:} is an instance of @code{Iliad.ILPage}. This class has accessors for both the @code{<head>} section and the @code{<body>} section of the page, respectively instances of @code{Iliad.ILHeadElement} and @code{Iliad.ILBodyElement}.

@example
updatePage: aPage [
    <cateogry: 'updating'>
    super updatePage: aPage.
    aPage head title: 'The multi-counter example'.
    aPage head stylesheet href: '/path/to/my/style.css'
]
@end example

The call to @code{super} should always be included, as Iliad itself includes some Javascript files (@pxref{The Javascript layer}) to send AJAX requests automatically.
@xref{Serving static files, Serving static files}, for more details about how to serve static files with Iliad.
